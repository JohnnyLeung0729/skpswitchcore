# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""Public API of USB Network Gate by Eltima Software"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _eveusb.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_eveusb')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_eveusb')
    _eveusb = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_eveusb', [dirname(__file__)])
        except ImportError:
            import _eveusb
            return _eveusb
        if fp is not None:
            try:
                _mod = imp.load_module('_eveusb', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _eveusb = swig_import_helper()
    del swig_import_helper
else:
    import _eveusb
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _eveusb.SHARED_PTR_DISOWN

def createBufferWrapper(buf, count, readonly):
    """createBufferWrapper(void * buf, size_t count, bool readonly) -> PyObject *"""
    return _eveusb.createBufferWrapper(buf, count, readonly)
class Device(object):
    """Proxy of C++ eltima::Device class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args):
        """
        __init__(eltima::Device self) -> Device
        __init__(eltima::Device self, std::string const & reverse_host_, unsigned short tcp_port, std::string const & kernel_devname_) -> Device
        __init__(eltima::Device self, std::string const & host_, std::string const & reverse_host_, unsigned short tcp_port, std::string const & usbhub_, std::string const & usbport_) -> Device
        __init__(eltima::Device self, std::string const & dev, bool is_local) -> Device
        """
        _eveusb.Device_swiginit(self, _eveusb.new_Device(*args))

    def isa(self, dev):
        """isa(Device self, Device dev) -> bool"""
        return _eveusb.Device_isa(self, dev)


    def update(self, dev):
        """update(Device self, Device dev) -> bool"""
        return _eveusb.Device_update(self, dev)


    def clone(self):
        """clone(Device self) -> Device"""
        return _eveusb.Device_clone(self)


    def __lt__(self, dev):
        """__lt__(Device self, Device dev) -> bool"""
        return _eveusb.Device___lt__(self, dev)


    def __eq__(self, dev):
        """__eq__(Device self, Device dev) -> bool"""
        return _eveusb.Device___eq__(self, dev)


    def asString(self, with_password=False):
        """
        asString(Device self, bool with_password=False) -> std::string
        asString(Device self) -> std::string
        """
        return _eveusb.Device_asString(self, with_password)


    def isLocal(self):
        """isLocal(Device self) -> bool"""
        return _eveusb.Device_isLocal(self)


    def isRemote(self):
        """isRemote(Device self) -> bool"""
        return _eveusb.Device_isRemote(self)


    def host(self):
        """host(Device self) -> std::string"""
        return _eveusb.Device_host(self)


    def port(self):
        """port(Device self) -> unsigned short"""
        return _eveusb.Device_port(self)


    def reverse_host(self):
        """reverse_host(Device self) -> std::string"""
        return _eveusb.Device_reverse_host(self)


    def isReverse(self):
        """isReverse(Device self) -> bool"""
        return _eveusb.Device_isReverse(self)


    def setUsbHub(self, usbhub_):
        """setUsbHub(Device self, std::string const & usbhub_) -> bool"""
        return _eveusb.Device_setUsbHub(self, usbhub_)


    def usbhub(self):
        """usbhub(Device self) -> std::string"""
        return _eveusb.Device_usbhub(self)


    def setUsbPort(self, usbport_):
        """setUsbPort(Device self, std::string const & usbport_) -> bool"""
        return _eveusb.Device_setUsbPort(self, usbport_)


    def usbport(self):
        """usbport(Device self) -> std::string"""
        return _eveusb.Device_usbport(self)


    def devicenick(self):
        """devicenick(Device self) -> std::string"""
        return _eveusb.Device_devicenick(self)


    def setDeviceNick(self, nick):
        """setDeviceNick(Device self, std::string const & nick)"""
        return _eveusb.Device_setDeviceNick(self, nick)


    def devicename(self):
        """devicename(Device self) -> std::string"""
        return _eveusb.Device_devicename(self)


    def setDeviceName(self, name):
        """setDeviceName(Device self, std::string const & name)"""
        return _eveusb.Device_setDeviceName(self, name)


    def kernel_devname(self):
        """kernel_devname(Device self) -> std::string"""
        return _eveusb.Device_kernel_devname(self)


    def authorization(self):
        """authorization(Device self) -> bool"""
        return _eveusb.Device_authorization(self)


    def setAuthorization(self, auth):
        """setAuthorization(Device self, bool auth)"""
        return _eveusb.Device_setAuthorization(self, auth)


    def encryption(self):
        """encryption(Device self) -> bool"""
        return _eveusb.Device_encryption(self)


    def setEncryption(self, encr):
        """setEncryption(Device self, bool encr)"""
        return _eveusb.Device_setEncryption(self, encr)


    def compression(self):
        """compression(Device self) -> bool"""
        return _eveusb.Device_compression(self)


    def setCompression(self, compr):
        """setCompression(Device self, bool compr)"""
        return _eveusb.Device_setCompression(self, compr)


    def hasPassword(self):
        """hasPassword(Device self) -> bool"""
        return _eveusb.Device_hasPassword(self)


    def password(self):
        """password(Device self) -> std::string"""
        return _eveusb.Device_password(self)


    def setPassword(self, cleartext):
        """setPassword(Device self, std::string const & cleartext)"""
        return _eveusb.Device_setPassword(self, cleartext)


    def sharedWith(self):
        """sharedWith(Device self) -> std::string"""
        return _eveusb.Device_sharedWith(self)


    def setSharedWith(self, peername):
        """setSharedWith(Device self, std::string const & peername)"""
        return _eveusb.Device_setSharedWith(self, peername)


    def __nonzero__(self):
        """__nonzero__(Device self) -> bool"""
        return _eveusb.Device___nonzero__(self)


    def __bool__(self):
        """__bool__(Device self) -> bool"""
        return _eveusb.Device___bool__(self)


    def __hash__(self):
        """__hash__(Device self) -> long"""
        return _eveusb.Device___hash__(self)


    def __str__(self):
        """__str__(Device self) -> std::string"""
        return _eveusb.Device___str__(self)


    def __repr__(self):
        """__repr__(Device self) -> std::string"""
        return _eveusb.Device___repr__(self)

    __swig_destroy__ = _eveusb.delete_Device
Device.isa = new_instancemethod(_eveusb.Device_isa, None, Device)
Device.update = new_instancemethod(_eveusb.Device_update, None, Device)
Device.clone = new_instancemethod(_eveusb.Device_clone, None, Device)
Device.__lt__ = new_instancemethod(_eveusb.Device___lt__, None, Device)
Device.__eq__ = new_instancemethod(_eveusb.Device___eq__, None, Device)
Device.asString = new_instancemethod(_eveusb.Device_asString, None, Device)
Device.isLocal = new_instancemethod(_eveusb.Device_isLocal, None, Device)
Device.isRemote = new_instancemethod(_eveusb.Device_isRemote, None, Device)
Device.host = new_instancemethod(_eveusb.Device_host, None, Device)
Device.port = new_instancemethod(_eveusb.Device_port, None, Device)
Device.reverse_host = new_instancemethod(_eveusb.Device_reverse_host, None, Device)
Device.isReverse = new_instancemethod(_eveusb.Device_isReverse, None, Device)
Device.setUsbHub = new_instancemethod(_eveusb.Device_setUsbHub, None, Device)
Device.usbhub = new_instancemethod(_eveusb.Device_usbhub, None, Device)
Device.setUsbPort = new_instancemethod(_eveusb.Device_setUsbPort, None, Device)
Device.usbport = new_instancemethod(_eveusb.Device_usbport, None, Device)
Device.devicenick = new_instancemethod(_eveusb.Device_devicenick, None, Device)
Device.setDeviceNick = new_instancemethod(_eveusb.Device_setDeviceNick, None, Device)
Device.devicename = new_instancemethod(_eveusb.Device_devicename, None, Device)
Device.setDeviceName = new_instancemethod(_eveusb.Device_setDeviceName, None, Device)
Device.kernel_devname = new_instancemethod(_eveusb.Device_kernel_devname, None, Device)
Device.authorization = new_instancemethod(_eveusb.Device_authorization, None, Device)
Device.setAuthorization = new_instancemethod(_eveusb.Device_setAuthorization, None, Device)
Device.encryption = new_instancemethod(_eveusb.Device_encryption, None, Device)
Device.setEncryption = new_instancemethod(_eveusb.Device_setEncryption, None, Device)
Device.compression = new_instancemethod(_eveusb.Device_compression, None, Device)
Device.setCompression = new_instancemethod(_eveusb.Device_setCompression, None, Device)
Device.hasPassword = new_instancemethod(_eveusb.Device_hasPassword, None, Device)
Device.password = new_instancemethod(_eveusb.Device_password, None, Device)
Device.setPassword = new_instancemethod(_eveusb.Device_setPassword, None, Device)
Device.sharedWith = new_instancemethod(_eveusb.Device_sharedWith, None, Device)
Device.setSharedWith = new_instancemethod(_eveusb.Device_setSharedWith, None, Device)
Device.__nonzero__ = new_instancemethod(_eveusb.Device___nonzero__, None, Device)
Device.__bool__ = new_instancemethod(_eveusb.Device___bool__, None, Device)
Device.__hash__ = new_instancemethod(_eveusb.Device___hash__, None, Device)
Device.__str__ = new_instancemethod(_eveusb.Device___str__, None, Device)
Device.__repr__ = new_instancemethod(_eveusb.Device___repr__, None, Device)
Device_swigregister = _eveusb.Device_swigregister
Device_swigregister(Device)


def __ne__(a, b):
    """__ne__(Device a, Device b) -> bool"""
    return _eveusb.__ne__(a, b)

def hash_value(d):
    """hash_value(Device d) -> size_t"""
    return _eveusb.hash_value(d)
class DeviceInfo(object):
    """Proxy of C++ eltima::DeviceInfo class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bcdUSB = _swig_property(_eveusb.DeviceInfo_bcdUSB_get, _eveusb.DeviceInfo_bcdUSB_set)
    DeviceClass = _swig_property(_eveusb.DeviceInfo_DeviceClass_get, _eveusb.DeviceInfo_DeviceClass_set)
    DeviceSubClass = _swig_property(_eveusb.DeviceInfo_DeviceSubClass_get, _eveusb.DeviceInfo_DeviceSubClass_set)
    DeviceProtocol = _swig_property(_eveusb.DeviceInfo_DeviceProtocol_get, _eveusb.DeviceInfo_DeviceProtocol_set)
    MaxPacketSize = _swig_property(_eveusb.DeviceInfo_MaxPacketSize_get, _eveusb.DeviceInfo_MaxPacketSize_set)
    idVendor = _swig_property(_eveusb.DeviceInfo_idVendor_get, _eveusb.DeviceInfo_idVendor_set)
    idProduct = _swig_property(_eveusb.DeviceInfo_idProduct_get, _eveusb.DeviceInfo_idProduct_set)
    bcdDevice = _swig_property(_eveusb.DeviceInfo_bcdDevice_get, _eveusb.DeviceInfo_bcdDevice_set)
    product = _swig_property(_eveusb.DeviceInfo_product_get, _eveusb.DeviceInfo_product_set)
    manufacturer = _swig_property(_eveusb.DeviceInfo_manufacturer_get, _eveusb.DeviceInfo_manufacturer_set)
    serial = _swig_property(_eveusb.DeviceInfo_serial_get, _eveusb.DeviceInfo_serial_set)
    NumConfigurations = _swig_property(_eveusb.DeviceInfo_NumConfigurations_get, _eveusb.DeviceInfo_NumConfigurations_set)

    def __init__(self):
        """__init__(eltima::DeviceInfo self) -> DeviceInfo"""
        _eveusb.DeviceInfo_swiginit(self, _eveusb.new_DeviceInfo())
    __swig_destroy__ = _eveusb.delete_DeviceInfo
DeviceInfo_swigregister = _eveusb.DeviceInfo_swigregister
DeviceInfo_swigregister(DeviceInfo)

class License(object):
    """Proxy of C++ eltima::License class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    deviceLimit = _swig_property(_eveusb.License_deviceLimit_get, _eveusb.License_deviceLimit_set)
    licenseType = _swig_property(_eveusb.License_licenseType_get, _eveusb.License_licenseType_set)
    registeredTo = _swig_property(_eveusb.License_registeredTo_get, _eveusb.License_registeredTo_set)
    creationTime = _swig_property(_eveusb.License_creationTime_get, _eveusb.License_creationTime_set)
    trialExpires = _swig_property(_eveusb.License_trialExpires_get, _eveusb.License_trialExpires_set)

    def __init__(self):
        """__init__(eltima::License self) -> License"""
        _eveusb.License_swiginit(self, _eveusb.new_License())
    __swig_destroy__ = _eveusb.delete_License
License_swigregister = _eveusb.License_swigregister
License_swigregister(License)

class EventHandler(object):
    """Proxy of C++ eltima::EveusbEventHandler class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _eveusb.delete_EventHandler

    def writeToDaemon(self, buf, count):
        """writeToDaemon(EventHandler self, void const * buf, size_t count) -> long"""
        return _eveusb.EventHandler_writeToDaemon(self, buf, count)


    def readFromDaemon(self, buf, count):
        """readFromDaemon(EventHandler self, void * buf, size_t count) -> long"""
        return _eveusb.EventHandler_readFromDaemon(self, buf, count)


    def onError(self, msg):
        """onError(EventHandler self, std::string const & msg)"""
        return _eveusb.EventHandler_onError(self, msg)


    def onMessage(self, msg, incoming):
        """onMessage(EventHandler self, std::string const & msg, bool incoming)"""
        return _eveusb.EventHandler_onMessage(self, msg, incoming)


    def onVersion(self, version):
        """onVersion(EventHandler self, std::string const & version)"""
        return _eveusb.EventHandler_onVersion(self, version)


    def onLicense(self, info):
        """onLicense(EventHandler self, License info)"""
        return _eveusb.EventHandler_onLicense(self, info)


    def onLoglevel(self, level):
        """onLoglevel(EventHandler self, int level)"""
        return _eveusb.EventHandler_onLoglevel(self, level)


    def onShareLimitExceeded(self, dev, limit):
        """onShareLimitExceeded(EventHandler self, Device dev, int limit)"""
        return _eveusb.EventHandler_onShareLimitExceeded(self, dev, limit)


    def onLocalDeviceTreeEnumerated(self):
        """onLocalDeviceTreeEnumerated(EventHandler self)"""
        return _eveusb.EventHandler_onLocalDeviceTreeEnumerated(self)


    def onSharedDevicesEnumerated(self):
        """onSharedDevicesEnumerated(EventHandler self)"""
        return _eveusb.EventHandler_onSharedDevicesEnumerated(self)


    def onRemoteDevicesEnumerated(self):
        """onRemoteDevicesEnumerated(EventHandler self)"""
        return _eveusb.EventHandler_onRemoteDevicesEnumerated(self)


    def onServerFound(self, host):
        """onServerFound(EventHandler self, std::string const & host)"""
        return _eveusb.EventHandler_onServerFound(self, host)


    def onServerDeviceFound(self, dev):
        """onServerDeviceFound(EventHandler self, Device dev)"""
        return _eveusb.EventHandler_onServerDeviceFound(self, dev)


    def onServerDevicesEnumerated(self, host):
        """onServerDevicesEnumerated(EventHandler self, std::string const & host)"""
        return _eveusb.EventHandler_onServerDevicesEnumerated(self, host)


    def onLocalDeviceInfo(self, devname, info):
        """onLocalDeviceInfo(EventHandler self, std::string const & devname, DeviceInfo info)"""
        return _eveusb.EventHandler_onLocalDeviceInfo(self, devname, info)


    def onLocalAddedRemoved(self, devname, maxchild, name, added):
        """onLocalAddedRemoved(EventHandler self, std::string const & devname, int maxchild, std::string const & name, bool added)"""
        return _eveusb.EventHandler_onLocalAddedRemoved(self, devname, maxchild, name, added)


    def onLocalSharedUnshared(self, dev, shared):
        """onLocalSharedUnshared(EventHandler self, Device dev, bool shared)"""
        return _eveusb.EventHandler_onLocalSharedUnshared(self, dev, shared)


    def onLocalAcquiredReleased(self, dev, acquired):
        """onLocalAcquiredReleased(EventHandler self, Device dev, bool acquired)"""
        return _eveusb.EventHandler_onLocalAcquiredReleased(self, dev, acquired)


    def onRemoteConnecting(self, dev):
        """onRemoteConnecting(EventHandler self, Device dev)"""
        return _eveusb.EventHandler_onRemoteConnecting(self, dev)


    def onRemoteConnected(self, dev):
        """onRemoteConnected(EventHandler self, Device dev)"""
        return _eveusb.EventHandler_onRemoteConnected(self, dev)


    def onRemoteReconnecting(self, dev):
        """onRemoteReconnecting(EventHandler self, Device dev)"""
        return _eveusb.EventHandler_onRemoteReconnecting(self, dev)


    def onRemoteDisconnecting(self, dev):
        """onRemoteDisconnecting(EventHandler self, Device dev)"""
        return _eveusb.EventHandler_onRemoteDisconnecting(self, dev)


    def onRemoteDisconnected(self, dev):
        """onRemoteDisconnected(EventHandler self, Device dev)"""
        return _eveusb.EventHandler_onRemoteDisconnected(self, dev)


    def onRemoteDeleted(self, dev):
        """onRemoteDeleted(EventHandler self, Device dev)"""
        return _eveusb.EventHandler_onRemoteDeleted(self, dev)


    def onCompressionHint(self, size_or_speed):
        """onCompressionHint(EventHandler self, bool size_or_speed)"""
        return _eveusb.EventHandler_onCompressionHint(self, size_or_speed)


    def __init__(self):
        """__init__(eltima::EveusbEventHandler self) -> EventHandler"""
        if self.__class__ == EventHandler:
            _self = None
        else:
            _self = self
        _eveusb.EventHandler_swiginit(self, _eveusb.new_EventHandler(_self, ))
    def __disown__(self):
        self.this.disown()
        _eveusb.disown_EventHandler(self)
        return weakref_proxy(self)
EventHandler.writeToDaemon = new_instancemethod(_eveusb.EventHandler_writeToDaemon, None, EventHandler)
EventHandler.readFromDaemon = new_instancemethod(_eveusb.EventHandler_readFromDaemon, None, EventHandler)
EventHandler.onError = new_instancemethod(_eveusb.EventHandler_onError, None, EventHandler)
EventHandler.onMessage = new_instancemethod(_eveusb.EventHandler_onMessage, None, EventHandler)
EventHandler.onVersion = new_instancemethod(_eveusb.EventHandler_onVersion, None, EventHandler)
EventHandler.onLicense = new_instancemethod(_eveusb.EventHandler_onLicense, None, EventHandler)
EventHandler.onLoglevel = new_instancemethod(_eveusb.EventHandler_onLoglevel, None, EventHandler)
EventHandler.onShareLimitExceeded = new_instancemethod(_eveusb.EventHandler_onShareLimitExceeded, None, EventHandler)
EventHandler.onLocalDeviceTreeEnumerated = new_instancemethod(_eveusb.EventHandler_onLocalDeviceTreeEnumerated, None, EventHandler)
EventHandler.onSharedDevicesEnumerated = new_instancemethod(_eveusb.EventHandler_onSharedDevicesEnumerated, None, EventHandler)
EventHandler.onRemoteDevicesEnumerated = new_instancemethod(_eveusb.EventHandler_onRemoteDevicesEnumerated, None, EventHandler)
EventHandler.onServerFound = new_instancemethod(_eveusb.EventHandler_onServerFound, None, EventHandler)
EventHandler.onServerDeviceFound = new_instancemethod(_eveusb.EventHandler_onServerDeviceFound, None, EventHandler)
EventHandler.onServerDevicesEnumerated = new_instancemethod(_eveusb.EventHandler_onServerDevicesEnumerated, None, EventHandler)
EventHandler.onLocalDeviceInfo = new_instancemethod(_eveusb.EventHandler_onLocalDeviceInfo, None, EventHandler)
EventHandler.onLocalAddedRemoved = new_instancemethod(_eveusb.EventHandler_onLocalAddedRemoved, None, EventHandler)
EventHandler.onLocalSharedUnshared = new_instancemethod(_eveusb.EventHandler_onLocalSharedUnshared, None, EventHandler)
EventHandler.onLocalAcquiredReleased = new_instancemethod(_eveusb.EventHandler_onLocalAcquiredReleased, None, EventHandler)
EventHandler.onRemoteConnecting = new_instancemethod(_eveusb.EventHandler_onRemoteConnecting, None, EventHandler)
EventHandler.onRemoteConnected = new_instancemethod(_eveusb.EventHandler_onRemoteConnected, None, EventHandler)
EventHandler.onRemoteReconnecting = new_instancemethod(_eveusb.EventHandler_onRemoteReconnecting, None, EventHandler)
EventHandler.onRemoteDisconnecting = new_instancemethod(_eveusb.EventHandler_onRemoteDisconnecting, None, EventHandler)
EventHandler.onRemoteDisconnected = new_instancemethod(_eveusb.EventHandler_onRemoteDisconnected, None, EventHandler)
EventHandler.onRemoteDeleted = new_instancemethod(_eveusb.EventHandler_onRemoteDeleted, None, EventHandler)
EventHandler.onCompressionHint = new_instancemethod(_eveusb.EventHandler_onCompressionHint, None, EventHandler)
EventHandler_swigregister = _eveusb.EventHandler_swigregister
EventHandler_swigregister(EventHandler)

class Controller(object):
    """Proxy of C++ eltima::EveusbController class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(eltima::EveusbController self) -> Controller"""
        _eveusb.Controller_swiginit(self, _eveusb.new_Controller())
    __swig_destroy__ = _eveusb.delete_Controller

    def connect():
        """connect() -> int"""
        return _eveusb.Controller_connect()

    connect = staticmethod(connect)

    def getSocketPath():
        """getSocketPath() -> std::string"""
        return _eveusb.Controller_getSocketPath()

    getSocketPath = staticmethod(getSocketPath)

    def setEventHandler(self, obj):
        """setEventHandler(Controller self, EventHandler obj)"""
        return _eveusb.Controller_setEventHandler(self, obj)


    def onDataAvailable(self, bytes=-1):
        """
        onDataAvailable(Controller self, long bytes=-1) -> int
        onDataAvailable(Controller self) -> int
        """
        return _eveusb.Controller_onDataAvailable(self, bytes)


    def clearDataAvailable(self):
        """clearDataAvailable(Controller self)"""
        return _eveusb.Controller_clearDataAvailable(self)


    def reloadDaemon(self):
        """reloadDaemon(Controller self) -> int"""
        return _eveusb.Controller_reloadDaemon(self)


    def stopDaemon(self):
        """stopDaemon(Controller self) -> int"""
        return _eveusb.Controller_stopDaemon(self)


    def getLoglevel(self):
        """getLoglevel(Controller self) -> int"""
        return _eveusb.Controller_getLoglevel(self)


    def setLoglevel(self, level):
        """setLoglevel(Controller self, int level) -> int"""
        return _eveusb.Controller_setLoglevel(self, level)


    def getLicense(self):
        """getLicense(Controller self) -> int"""
        return _eveusb.Controller_getLicense(self)


    def Register(self, name, code):
        """Register(Controller self, std::string const & name, std::string const & code) -> int"""
        return _eveusb.Controller_Register(self, name, code)


    def getVersion(self):
        """getVersion(Controller self) -> int"""
        return _eveusb.Controller_getVersion(self)


    def enumLocalDeviceTree(self):
        """enumLocalDeviceTree(Controller self) -> int"""
        return _eveusb.Controller_enumLocalDeviceTree(self)


    def enumSharedDevices(self):
        """enumSharedDevices(Controller self) -> int"""
        return _eveusb.Controller_enumSharedDevices(self)


    def enumRemoteDevices(self):
        """enumRemoteDevices(Controller self) -> int"""
        return _eveusb.Controller_enumRemoteDevices(self)


    def findServers(self):
        """findServers(Controller self) -> int"""
        return _eveusb.Controller_findServers(self)


    def findServerDevices(self, host):
        """findServerDevices(Controller self, std::string const & host) -> int"""
        return _eveusb.Controller_findServerDevices(self, host)


    def localShare(self, dev):
        """localShare(Controller self, Device dev) -> int"""
        return _eveusb.Controller_localShare(self, dev)


    def localUnshare(self, dev):
        """localUnshare(Controller self, Device dev) -> int"""
        return _eveusb.Controller_localUnshare(self, dev)


    def localUnshareAll(self):
        """localUnshareAll(Controller self) -> int"""
        return _eveusb.Controller_localUnshareAll(self)


    def localDisconnectClient(self, dev):
        """localDisconnectClient(Controller self, Device dev) -> int"""
        return _eveusb.Controller_localDisconnectClient(self, dev)


    def remoteAdd(self, dev):
        """remoteAdd(Controller self, Device dev) -> int"""
        return _eveusb.Controller_remoteAdd(self, dev)


    def remoteConnect(self, dev, persistent):
        """remoteConnect(Controller self, Device dev, bool persistent) -> int"""
        return _eveusb.Controller_remoteConnect(self, dev, persistent)


    def remoteDisconnect(self, dev):
        """remoteDisconnect(Controller self, Device dev) -> int"""
        return _eveusb.Controller_remoteDisconnect(self, dev)


    def remoteDelete(self, dev):
        """remoteDelete(Controller self, Device dev) -> int"""
        return _eveusb.Controller_remoteDelete(self, dev)


    def getCompressionHint(self):
        """getCompressionHint(Controller self) -> int"""
        return _eveusb.Controller_getCompressionHint(self)


    def setCompressionHint(self, size_or_speed):
        """setCompressionHint(Controller self, bool size_or_speed) -> int"""
        return _eveusb.Controller_setCompressionHint(self, size_or_speed)


    def saveDevices(self):
        """saveDevices(Controller self) -> int"""
        return _eveusb.Controller_saveDevices(self)

Controller.setEventHandler = new_instancemethod(_eveusb.Controller_setEventHandler, None, Controller)
Controller.onDataAvailable = new_instancemethod(_eveusb.Controller_onDataAvailable, None, Controller)
Controller.clearDataAvailable = new_instancemethod(_eveusb.Controller_clearDataAvailable, None, Controller)
Controller.reloadDaemon = new_instancemethod(_eveusb.Controller_reloadDaemon, None, Controller)
Controller.stopDaemon = new_instancemethod(_eveusb.Controller_stopDaemon, None, Controller)
Controller.getLoglevel = new_instancemethod(_eveusb.Controller_getLoglevel, None, Controller)
Controller.setLoglevel = new_instancemethod(_eveusb.Controller_setLoglevel, None, Controller)
Controller.getLicense = new_instancemethod(_eveusb.Controller_getLicense, None, Controller)
Controller.Register = new_instancemethod(_eveusb.Controller_Register, None, Controller)
Controller.getVersion = new_instancemethod(_eveusb.Controller_getVersion, None, Controller)
Controller.enumLocalDeviceTree = new_instancemethod(_eveusb.Controller_enumLocalDeviceTree, None, Controller)
Controller.enumSharedDevices = new_instancemethod(_eveusb.Controller_enumSharedDevices, None, Controller)
Controller.enumRemoteDevices = new_instancemethod(_eveusb.Controller_enumRemoteDevices, None, Controller)
Controller.findServers = new_instancemethod(_eveusb.Controller_findServers, None, Controller)
Controller.findServerDevices = new_instancemethod(_eveusb.Controller_findServerDevices, None, Controller)
Controller.localShare = new_instancemethod(_eveusb.Controller_localShare, None, Controller)
Controller.localUnshare = new_instancemethod(_eveusb.Controller_localUnshare, None, Controller)
Controller.localUnshareAll = new_instancemethod(_eveusb.Controller_localUnshareAll, None, Controller)
Controller.localDisconnectClient = new_instancemethod(_eveusb.Controller_localDisconnectClient, None, Controller)
Controller.remoteAdd = new_instancemethod(_eveusb.Controller_remoteAdd, None, Controller)
Controller.remoteConnect = new_instancemethod(_eveusb.Controller_remoteConnect, None, Controller)
Controller.remoteDisconnect = new_instancemethod(_eveusb.Controller_remoteDisconnect, None, Controller)
Controller.remoteDelete = new_instancemethod(_eveusb.Controller_remoteDelete, None, Controller)
Controller.getCompressionHint = new_instancemethod(_eveusb.Controller_getCompressionHint, None, Controller)
Controller.setCompressionHint = new_instancemethod(_eveusb.Controller_setCompressionHint, None, Controller)
Controller.saveDevices = new_instancemethod(_eveusb.Controller_saveDevices, None, Controller)
Controller_swigregister = _eveusb.Controller_swigregister
Controller_swigregister(Controller)

def Controller_connect():
    """Controller_connect() -> int"""
    return _eveusb.Controller_connect()

def Controller_getSocketPath():
    """Controller_getSocketPath() -> std::string"""
    return _eveusb.Controller_getSocketPath()


def getLoglevelStr(level):
    """getLoglevelStr(int level) -> char const *"""
    return _eveusb.getLoglevelStr(level)

def getLoglevelValue(level):
    """getLoglevelValue(std::string const & level) -> int"""
    return _eveusb.getLoglevelValue(level)


def assign(dst, src):
	"Copies src to dst. Helper for EventHandler.readFromDaemon() implementation."
	assert len(dst) >= len(src)
	for i in range(len(src)):
		dst[i] = src[i]



